import * as shell from 'shelljs'
import * as _ from 'lodash'
import * as yargs from 'yargs'
import { HandlerArgs } from '../../package/lib/handler'
import * as tosource from 'tosource'
import * as fs from 'fs'
import * as spec from '../../languages'

function langID(name: string): string {
    const toID = {
        csharp: 'cs',
    }
    return name in toID ? toID[name] : name
}

function quote(value: string): string {
    return `'${value.replace(/\\/g, '\\\\')}'`
}

function jsStringify(values: string[]): string {
    return `[${values.map(quote).join(', ')}]`
}

function main(): void {
    const args = yargs
        .option('languages', {
            describe: _.keys(spec.languages).join(','),
            type: 'string',
        })
        .option('push', { type: 'boolean' }).argv
    const languageFilter = !args.languages
        ? () => true
        : (_: any, key: string) => args.languages.split(',').includes(key)

    shell.set('-e')

    const depVersion = JSON.parse(shell.cat('template/package.json')).dependencies['@sourcegraph/basic-code-intel']
    const packageVersion = JSON.parse(shell.cat('package/package.json')).version
    if (depVersion !== packageVersion) {
        console.error(
            `You have to update template/package.json's dependency version ${depVersion} so that it matches package/package.json's version ${packageVersion}.`
        )
        process.exit(1)
    }

    shell.rm('-rf', 'temp')
    shell.mkdir('temp')
    console.log('Copying template/node_modules to temp/node_modules (takes ~15s) once up front')
    shell.cp('-R', 'template/node_modules', 'temp/node_modules')
    shell.cd('temp')

    _.forEach(_.pickBy(spec.languages, languageFilter), ({ handlerArgs, stylized }: spec.LanguageSpec, name) => {
        console.log('Updating', name)

        // Delete everything but node_modules
        shell.exec(`find . -mindepth 1 -maxdepth 1 ! -name 'node_modules' -exec rm -rf '{}' ';'`)
        // Copy from template/ everything but node_modules
        shell.exec(`find ../template -mindepth 1 -maxdepth 1 ! -name 'node_modules' -exec cp -R '{}' . ';'`)

        // The following git gymnastics update the first autogenerated commit in
        // the corresponding repository while preserving all commits after it.

        shell.exec(`git init`)
        shell.exec(`git remote add origin git@github.com:sourcegraph/sourcegraph-${name}.git`)
        shell.exec(`git fetch origin`)

        shell.exec(`git checkout --orphan temp`)

        shell.sed('-i', /\$LANGNAME\b/, name, 'package.json')
        shell.sed('-i', /\$LANGID\b/, langID(name), 'package.json')
        shell.sed('-i', /\$LANG\b/, stylized, 'package.json')
        shell.sed('-i', /"name": ".*"/, `"name": "${name}"`, 'package.json')
        shell.sed('-i', /"onLanguage:.*"/, `"onLanguage:${langID(name)}"`, 'package.json')
        shell.sed('-i', /"title": ".*"/, `"title": "${stylized} code intelligence"`, 'package.json')
        shell.sed(
            '-i',
            /"description": ".*"/,
            `"description": "Provides basic code intelligence for ${stylized} using the Sourcegraph search API"`,
            'package.json'
        )
        shell.sed('-i', /"url": ".*"/, `"url": "https://github.com/sourcegraph/sourcegraph-${name}"`, 'package.json')
        shell.sed('-i', /\$LANGNAME\b/, name, 'README.md')
        shell.sed('-i', /\$LANG\b/, stylized, 'README.md')
        shell.sed('-i', /\.\.\/\.\.\/package\/lib/, '@sourcegraph/basic-code-intel', 'src/extension.ts')

        fs.writeFileSync(
            'src/extension.ts',
            `import { activateBasicCodeIntel } from '@sourcegraph/basic-code-intel'

export const activate = activateBasicCodeIntel(${tosource.default(handlerArgs)})
`
        )

        shell.exec(
            'git add .editorconfig .gitignore .prettierignore .prettierrc LICENSE package.json README.md package.json src tsconfig.json yarn.lock'
        )
        shell.exec(`git commit -m "Autogenerate the ${name} language extension"`)
        shell.exec(`git rebase --onto temp $(git rev-list --max-parents=0 origin/master) origin/master`)
        shell.exec(`git branch -f temp HEAD`)
        shell.exec(`git checkout temp`)
        shell.exec(`yarn --non-interactive`)
        if (args.push) {
            shell.exec(`git push --force origin temp:master`)
            shell.exec('src -config=$HOME/src-config.prod.json extension publish')
        } else {
            console.log('Not pushing', name)
        }
    })

    shell.cd('..')
}

main()
